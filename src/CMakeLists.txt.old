cmake_minimum_required(VERSION 3.30)
set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
# == DO NOT EDIT THE FOLLOWING LINES for the Raspberry Pi Pico VS Code Extension to work ==
if(WIN32)
    set(USERHOME $ENV{USERPROFILE})
else()
    set(USERHOME $ENV{HOME})
endif()
set(sdkVersion 2.0.0)
set(toolchainVersion 13_2_Rel1)
set(picotoolVersion 2.0.0)
set(picoVscode ${USERHOME}/.pico-sdk/cmake/pico-vscode.cmake)
if (EXISTS ${picoVscode})
    include(${picoVscode})
endif()
# ====================================================================================
set(PICO_BOARD pico CACHE STRING "Board type")

# Pull in Raspberry Pi Pico SDK (must be before project)
include(pico_sdk_import.cmake)

project(ote_ij_fft C CXX ASM)

# Initialise the Raspberry Pi Pico SDK
pico_sdk_init()


# Add executable. Default name is the project name, version 0.1

add_executable(
    ote_ij_fft 
    ote_ij_fft.c 
    fft.c 
    kiss_fft.c 
    kiss_fftr.c 
    usb_descriptors.c
    tinyusb/src/tusb.c 
    tinyusb/src/class/hid/hid_device.c 
    tinyusb/src/device/usbd.c
    )

pico_set_program_name(ote_ij_fft "ote_ij_fft")
pico_set_program_version(ote_ij_fft "0.1")

# Modify the below lines to enable/disable output over UART/USB
pico_enable_stdio_uart(ote_ij_fft 0)
pico_enable_stdio_usb(ote_ij_fft 0)
# Add the standard library to the build
target_link_libraries(ote_ij_fft
pico_stdlib hardware_adc hardware_dma hardware_spi tinyusb_device tinyusb_board tinyusb_host)

# Add the standard include files to the build
target_include_directories(ote_ij_fft PRIVATE
${CMAKE_CURRENT_LIST_DIR}
${CMAKE_CURRENT_LIST_DIR}/.. # for our common lwipopts or any other standard includes, if required
${CMAKE_CURRENT_LIST_DIR}/tinyusb
${CMAKE_CURRENT_LIST_DIR}/tinyusb/src 
${CMAKE_CURRENT_LIST_DIR}/tinyusb/src/class/hid 
${CMAKE_CURRENT_LIST_DIR}/tinyusb/src/device
)
pico_add_extra_outputs(ote_ij_fft)

